/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Bank;
import io.swagger.model.Errors;
import io.swagger.model.GetBranchArrayResponse;
import io.swagger.model.GetBranchResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-05-29T11:56:28.354Z")

@Validated
@Api(value = "{bank_id}", description = "the {bank_id} API")
@RequestMapping(value = "/banks")
public interface BankIdApi {

    @ApiOperation(value = "Obtains specific branch information of a specific bank.", nickname = "bankIdBranchesBranchIdGet", notes = "This functionality allows  to have the information of contact for a specific branch in a specific bank.  The information of contact are:  Postal addres : if the branch have a local where the customer could go  Land line phone: for the telephone land line to contact the customer and the schedule in every day of a week.  Email: for the generic email contact with the schedule in every day of a week.   The way to fill in the fields  bank and branch will differ by country:    -Countries where they have identified the concept of branch, fill in both data, examples of countries that work asis are Spain, Portugal ...    -Countries where the concept of branch does not exist or is embedded in the bank's codification, in this case only the bank field will be filled in, example countries of this format are USA, Austria, Germany...    -There is a special case with UK that the bank field can be informed with the sort code, if the consumer does not know the bank code.   In all the cases the bank id could be informed in BIC format or in local format acording to the central bank in each country.  Always returns information even if the branch is not informed because the data goes in the bank identification.", response = GetBranchResponse.class, authorizations = {
        @Authorization(value = "JWT Profile", scopes = {
            @AuthorizationScope(scope = "bankbranch.read", description = "Banks Branches scope")
            })
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GetBranchResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Errors.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Errors.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Errors.class),
        @ApiResponse(code = 404, message = "Not found", response = Errors.class),
        @ApiResponse(code = 500, message = "Internal server error", response = Errors.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = Errors.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = Errors.class) })
    @RequestMapping(value = "/{bank_id}/branches/{branch_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<GetBranchResponse> bankIdBranchesBranchIdGet(@ApiParam(value = "Field to send the access token to the API, initially OAuth and JWT." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The server responds with the field in the header with the response language. Following the ([ISO 639-2]-[ISO 3166-1/Alpha3]) code standard." ,required=true) @RequestHeader(value="language", required=true) String language,@ApiParam(value = "CHANNEL/SEGMENT FRONT_APP/VERSION DEVICE OS/OS_VERSION NETWORK_CLIENT/VERSION FRAMEWORK/VERSION Channel: [ISO 639-2][] plus 5 custom contry digits. For Segment: retail / business Front_App/Version: For example OneApp/1.0 Device: Platform value extracted from the device. For example iPhone13 OS/VERSION: android / iOS / windows / linux / macOS, version is a platform value extracted from the device. For example iOS/1.0 Network_Client/Version: App network client and version. For example CF_Network/5.1 Framework/Version: For example Darwin/16.3.0" ,required=true) @RequestHeader(value="device-information", required=true) String deviceInformation,@ApiParam(value = "The consumer application identifier for APIs. santander-client-id must be defined just as a Request header, this is not a header defined as an API Key at security definition level" ,required=true) @RequestHeader(value="santander-client-id", required=true) String santanderClientId,@ApiParam(value = "Unique bank ID",required=true) @PathVariable("bank_id") String bankId,@ApiParam(value = "This data corresponds to the codification of the branch id in the BBAN format of the contract .  This data is not present in all the countries, p.e Germany or USâ€¦ because it is inserted in the bank id.",required=true) @PathVariable("branch_id") String branchId,@ApiParam(value = "The consumer list of languages by order of preference. Following the (([ISO 639-2]-[ISO 3166-1/Alpha3])) code standard." ) @RequestHeader(value="accept-language", required=false) String acceptLanguage,@ApiParam(value = "The server responds with the data format of the response. Backend expected a JSON document format." ) @RequestHeader(value="content-type", required=false) String contentType,@ApiParam(value = "The consumer request the data format of the response by order of preference.Backend expected a JSON document format." ) @RequestHeader(value="accept", required=false) String accept,@ApiParam(value = "The consumer application identifier (only for IBM API Connect). Legacy. Will be reviewed in future releases." ) @RequestHeader(value="x-ibm-client-id", required=false) String xIbmClientId,@ApiParam(value = "The TraceId is 64 or 128-bit in length and indicates the overall ID of the trace. Every span in a trace shares this ID" ) @RequestHeader(value="x-b3-traceid", required=false) String xB3Traceid,@ApiParam(value = "The ParentSpanId is 64-bit in length and indicates the position of the parent operation in the trace tree. When the span is the root of the trace tree, there is no ParentSpanId." ) @RequestHeader(value="x-b3-parentspanid", required=false) String xB3Parentspanid,@ApiParam(value = "The SpanId is 64-bit in length and indicates the position of the current operation in the trace tree. The value should not be interpreted. It may or may not be derived from the value of the TraceId" ) @RequestHeader(value="x-b3-spanid", required=false) String xB3Spanid,@ApiParam(value = "Sampling is a mechanism to reduce the volume of data that ends up in the tracing system. In B3, sampling applies consistently per-trace: once the sampling decision is made, the same value should be consistently sent downstream. This means you will see all spans sharing a trace ID or none. Accepted values are\\n * 1. Means accepted\\n * 0. Means denied Before this specification was written, some tracers propagated X-B3-Sampled as true or false as opposed to 1 or 0. While you shouldn't encode x-b3-sampled as true or false, a lenient implementation may accept them" ) @RequestHeader(value="x-b3-sampled", required=false) String xB3Sampled,@ApiParam(value = "Extra information coming from the client. Needed for audit purposes" ) @RequestHeader(value="x-santander-audit", required=false) String xSantanderAudit,@ApiParam(value = "Device information permitted by operation for data query. Makes it possible to apply an experience base to optimize the data collection. This header is mandatory for Poland due to security reasons" ) @RequestHeader(value="trusted-device-app-id", required=false) String trustedDeviceAppId,@ApiParam(value = "Indicates what kind of cipher algorithmic approach will be applied to a response fields subset. Supported values: * asymmetric" ) @RequestHeader(value="santander-cipher-type", required=false) String santanderCipherType,@ApiParam(value = "Seed value applied on both sides to encrypt/decrypt response entity fields. This field is mandatory if Santander-Cipher-Type is presented and is asymetric in the request Headers collection." ) @RequestHeader(value="santander-cipher-seed", required=false) String santanderCipherSeed,@ApiParam(value = "Device time formatted presenting the following the Standard Time Format pattern yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" ) @RequestHeader(value="trusted-device-time", required=false) String trustedDeviceTime,@ApiParam(value = "Contains encripted parameters from the trusted device parameter source." ) @RequestHeader(value="trusted-device-params", required=false) String trustedDeviceParams);


    @ApiOperation(value = "Obtains a specific bank branches information for a customer.", nickname = "bankIdBranchesGet", notes = "This functionality allows  to have all the branches for a specific customer", response = GetBranchArrayResponse.class, authorizations = {
        @Authorization(value = "JWT Profile", scopes = {
            @AuthorizationScope(scope = "bankbranch.read", description = "Banks Branches scope")
            })
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GetBranchArrayResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Errors.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Errors.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Errors.class),
        @ApiResponse(code = 404, message = "Not found", response = Errors.class),
        @ApiResponse(code = 500, message = "Internal server error", response = Errors.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = Errors.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = Errors.class) })
    @RequestMapping(value = "/{bank_id}/branches",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<GetBranchArrayResponse> bankIdBranchesGet(@ApiParam(value = "Field to send the access token to the API, initially OAuth and JWT." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The server responds with the field in the header with the response language. Following the ([ISO 639-2]-[ISO 3166-1/Alpha3]) code standard." ,required=true) @RequestHeader(value="language", required=true) String language,@ApiParam(value = "CHANNEL/SEGMENT FRONT_APP/VERSION DEVICE OS/OS_VERSION NETWORK_CLIENT/VERSION FRAMEWORK/VERSION Channel: [ISO 639-2][] plus 5 custom contry digits. For Segment: retail / business Front_App/Version: For example OneApp/1.0 Device: Platform value extracted from the device. For example iPhone13 OS/VERSION: android / iOS / windows / linux / macOS, version is a platform value extracted from the device. For example iOS/1.0 Network_Client/Version: App network client and version. For example CF_Network/5.1 Framework/Version: For example Darwin/16.3.0" ,required=true) @RequestHeader(value="device-information", required=true) String deviceInformation,@ApiParam(value = "The consumer application identifier for APIs. santander-client-id must be defined just as a Request header, this is not a header defined as an API Key at security definition level" ,required=true) @RequestHeader(value="santander-client-id", required=true) String santanderClientId,@ApiParam(value = "Unique bank ID",required=true) @PathVariable("bank_id") String bankId,@ApiParam(value = "The consumer list of languages by order of preference. Following the (([ISO 639-2]-[ISO 3166-1/Alpha3])) code standard." ) @RequestHeader(value="accept-language", required=false) String acceptLanguage,@ApiParam(value = "The server responds with the data format of the response. Backend expected a JSON document format." ) @RequestHeader(value="content-type", required=false) String contentType,@ApiParam(value = "The consumer request the data format of the response by order of preference.Backend expected a JSON document format." ) @RequestHeader(value="accept", required=false) String accept,@ApiParam(value = "The consumer application identifier (only for IBM API Connect). Legacy. Will be reviewed in future releases." ) @RequestHeader(value="x-ibm-client-id", required=false) String xIbmClientId,@ApiParam(value = "The TraceId is 64 or 128-bit in length and indicates the overall ID of the trace. Every span in a trace shares this ID" ) @RequestHeader(value="x-b3-traceid", required=false) String xB3Traceid,@ApiParam(value = "The ParentSpanId is 64-bit in length and indicates the position of the parent operation in the trace tree. When the span is the root of the trace tree, there is no ParentSpanId." ) @RequestHeader(value="x-b3-parentspanid", required=false) String xB3Parentspanid,@ApiParam(value = "The SpanId is 64-bit in length and indicates the position of the current operation in the trace tree. The value should not be interpreted. It may or may not be derived from the value of the TraceId" ) @RequestHeader(value="x-b3-spanid", required=false) String xB3Spanid,@ApiParam(value = "Sampling is a mechanism to reduce the volume of data that ends up in the tracing system. In B3, sampling applies consistently per-trace: once the sampling decision is made, the same value should be consistently sent downstream. This means you will see all spans sharing a trace ID or none. Accepted values are\\n * 1. Means accepted\\n * 0. Means denied Before this specification was written, some tracers propagated X-B3-Sampled as true or false as opposed to 1 or 0. While you shouldn't encode x-b3-sampled as true or false, a lenient implementation may accept them" ) @RequestHeader(value="x-b3-sampled", required=false) String xB3Sampled,@ApiParam(value = "Extra information coming from the client. Needed for audit purposes" ) @RequestHeader(value="x-santander-audit", required=false) String xSantanderAudit,@ApiParam(value = "Device information permitted by operation for data query. Makes it possible to apply an experience base to optimize the data collection. This header is mandatory for Poland due to security reasons" ) @RequestHeader(value="trusted-device-app-id", required=false) String trustedDeviceAppId,@ApiParam(value = "Indicates what kind of cipher algorithmic approach will be applied to a response fields subset. Supported values: * asymmetric" ) @RequestHeader(value="santander-cipher-type", required=false) String santanderCipherType,@ApiParam(value = "Seed value applied on both sides to encrypt/decrypt response entity fields. This field is mandatory if Santander-Cipher-Type is presented and is asymetric in the request Headers collection." ) @RequestHeader(value="santander-cipher-seed", required=false) String santanderCipherSeed,@ApiParam(value = "Device time formatted presenting the following the Standard Time Format pattern yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" ) @RequestHeader(value="trusted-device-time", required=false) String trustedDeviceTime,@ApiParam(value = "Contains encripted parameters from the trusted device parameter source." ) @RequestHeader(value="trusted-device-params", required=false) String trustedDeviceParams);


    @ApiOperation(value = "Deregister the bank previously added by the customer.", nickname = "bankIdDelete", notes = "This feature allow to the user deregister the bank previously added by the customer. It receives the id of the bank to perform the operation.", authorizations = {
        @Authorization(value = "JWT Profile", scopes = {
            @AuthorizationScope(scope = "bankbranch.read", description = "Banks Branches scope")
            })
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The bank was deleted successfully."),
        @ApiResponse(code = 400, message = "Bad Request", response = Errors.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Errors.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Errors.class),
        @ApiResponse(code = 404, message = "Not found", response = Errors.class),
        @ApiResponse(code = 500, message = "Internal server error", response = Errors.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = Errors.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = Errors.class) })
    @RequestMapping(value = "/{bank_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> bankIdDelete(@ApiParam(value = "Field to send the access token to the API, initially OAuth and JWT." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The server responds with the field in the header with the response language. Following the ([ISO 639-2]-[ISO 3166-1/Alpha3]) code standard." ,required=true) @RequestHeader(value="language", required=true) String language,@ApiParam(value = "CHANNEL/SEGMENT FRONT_APP/VERSION DEVICE OS/OS_VERSION NETWORK_CLIENT/VERSION FRAMEWORK/VERSION Channel: [ISO 639-2][] plus 5 custom contry digits. For Segment: retail / business Front_App/Version: For example OneApp/1.0 Device: Platform value extracted from the device. For example iPhone13 OS/VERSION: android / iOS / windows / linux / macOS, version is a platform value extracted from the device. For example iOS/1.0 Network_Client/Version: App network client and version. For example CF_Network/5.1 Framework/Version: For example Darwin/16.3.0" ,required=true) @RequestHeader(value="device-information", required=true) String deviceInformation,@ApiParam(value = "The consumer application identifier for APIs. santander-client-id must be defined just as a Request header, this is not a header defined as an API Key at security definition level" ,required=true) @RequestHeader(value="santander-client-id", required=true) String santanderClientId,@ApiParam(value = "Unique bank ID",required=true) @PathVariable("bank_id") String bankId,@ApiParam(value = "The consumer list of languages by order of preference. Following the (([ISO 639-2]-[ISO 3166-1/Alpha3])) code standard." ) @RequestHeader(value="accept-language", required=false) String acceptLanguage,@ApiParam(value = "The server responds with the data format of the response. Backend expected a JSON document format." ) @RequestHeader(value="content-type", required=false) String contentType,@ApiParam(value = "The consumer request the data format of the response by order of preference.Backend expected a JSON document format." ) @RequestHeader(value="accept", required=false) String accept,@ApiParam(value = "The consumer application identifier (only for IBM API Connect). Legacy. Will be reviewed in future releases." ) @RequestHeader(value="x-ibm-client-id", required=false) String xIbmClientId,@ApiParam(value = "The TraceId is 64 or 128-bit in length and indicates the overall ID of the trace. Every span in a trace shares this ID" ) @RequestHeader(value="x-b3-traceid", required=false) String xB3Traceid,@ApiParam(value = "The ParentSpanId is 64-bit in length and indicates the position of the parent operation in the trace tree. When the span is the root of the trace tree, there is no ParentSpanId." ) @RequestHeader(value="x-b3-parentspanid", required=false) String xB3Parentspanid,@ApiParam(value = "The SpanId is 64-bit in length and indicates the position of the current operation in the trace tree. The value should not be interpreted. It may or may not be derived from the value of the TraceId" ) @RequestHeader(value="x-b3-spanid", required=false) String xB3Spanid,@ApiParam(value = "Sampling is a mechanism to reduce the volume of data that ends up in the tracing system. In B3, sampling applies consistently per-trace: once the sampling decision is made, the same value should be consistently sent downstream. This means you will see all spans sharing a trace ID or none. Accepted values are\\n * 1. Means accepted\\n * 0. Means denied Before this specification was written, some tracers propagated X-B3-Sampled as true or false as opposed to 1 or 0. While you shouldn't encode x-b3-sampled as true or false, a lenient implementation may accept them" ) @RequestHeader(value="x-b3-sampled", required=false) String xB3Sampled,@ApiParam(value = "Extra information coming from the client. Needed for audit purposes" ) @RequestHeader(value="x-santander-audit", required=false) String xSantanderAudit,@ApiParam(value = "Device information permitted by operation for data query. Makes it possible to apply an experience base to optimize the data collection. This header is mandatory for Poland due to security reasons" ) @RequestHeader(value="trusted-device-app-id", required=false) String trustedDeviceAppId,@ApiParam(value = "Indicates what kind of cipher algorithmic approach will be applied to a response fields subset. Supported values: * asymmetric" ) @RequestHeader(value="santander-cipher-type", required=false) String santanderCipherType,@ApiParam(value = "Seed value applied on both sides to encrypt/decrypt response entity fields. This field is mandatory if Santander-Cipher-Type is presented and is asymetric in the request Headers collection." ) @RequestHeader(value="santander-cipher-seed", required=false) String santanderCipherSeed,@ApiParam(value = "Device time formatted presenting the following the Standard Time Format pattern yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" ) @RequestHeader(value="trusted-device-time", required=false) String trustedDeviceTime,@ApiParam(value = "Contains encripted parameters from the trusted device parameter source." ) @RequestHeader(value="trusted-device-params", required=false) String trustedDeviceParams);


    @ApiOperation(value = "Obtains a particular bank customer information.", nickname = "bankIdGet", notes = "This feature returns the status information of the connection with a bank and it means that the customer connected that bank previously. With that information the user can ask for the Global Position of the bank.", response = Bank.class, authorizations = {
        @Authorization(value = "JWT Profile", scopes = {
            @AuthorizationScope(scope = "bankbranch.read", description = "Banks Branches scope")
            })
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Bank.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Errors.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Errors.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Errors.class),
        @ApiResponse(code = 404, message = "Not found", response = Errors.class),
        @ApiResponse(code = 500, message = "Internal server error", response = Errors.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = Errors.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = Errors.class) })
    @RequestMapping(value = "/{bank_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Bank> bankIdGet(@ApiParam(value = "Field to send the access token to the API, initially OAuth and JWT." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The server responds with the field in the header with the response language. Following the ([ISO 639-2]-[ISO 3166-1/Alpha3]) code standard." ,required=true) @RequestHeader(value="language", required=true) String language,@ApiParam(value = "CHANNEL/SEGMENT FRONT_APP/VERSION DEVICE OS/OS_VERSION NETWORK_CLIENT/VERSION FRAMEWORK/VERSION Channel: [ISO 639-2][] plus 5 custom contry digits. For Segment: retail / business Front_App/Version: For example OneApp/1.0 Device: Platform value extracted from the device. For example iPhone13 OS/VERSION: android / iOS / windows / linux / macOS, version is a platform value extracted from the device. For example iOS/1.0 Network_Client/Version: App network client and version. For example CF_Network/5.1 Framework/Version: For example Darwin/16.3.0" ,required=true) @RequestHeader(value="device-information", required=true) String deviceInformation,@ApiParam(value = "The consumer application identifier for APIs. santander-client-id must be defined just as a Request header, this is not a header defined as an API Key at security definition level" ,required=true) @RequestHeader(value="santander-client-id", required=true) String santanderClientId,@ApiParam(value = "Unique bank ID",required=true) @PathVariable("bank_id") String bankId,@ApiParam(value = "The consumer list of languages by order of preference. Following the (([ISO 639-2]-[ISO 3166-1/Alpha3])) code standard." ) @RequestHeader(value="accept-language", required=false) String acceptLanguage,@ApiParam(value = "The server responds with the data format of the response. Backend expected a JSON document format." ) @RequestHeader(value="content-type", required=false) String contentType,@ApiParam(value = "The consumer request the data format of the response by order of preference.Backend expected a JSON document format." ) @RequestHeader(value="accept", required=false) String accept,@ApiParam(value = "The consumer application identifier (only for IBM API Connect). Legacy. Will be reviewed in future releases." ) @RequestHeader(value="x-ibm-client-id", required=false) String xIbmClientId,@ApiParam(value = "The TraceId is 64 or 128-bit in length and indicates the overall ID of the trace. Every span in a trace shares this ID" ) @RequestHeader(value="x-b3-traceid", required=false) String xB3Traceid,@ApiParam(value = "The ParentSpanId is 64-bit in length and indicates the position of the parent operation in the trace tree. When the span is the root of the trace tree, there is no ParentSpanId." ) @RequestHeader(value="x-b3-parentspanid", required=false) String xB3Parentspanid,@ApiParam(value = "The SpanId is 64-bit in length and indicates the position of the current operation in the trace tree. The value should not be interpreted. It may or may not be derived from the value of the TraceId" ) @RequestHeader(value="x-b3-spanid", required=false) String xB3Spanid,@ApiParam(value = "Sampling is a mechanism to reduce the volume of data that ends up in the tracing system. In B3, sampling applies consistently per-trace: once the sampling decision is made, the same value should be consistently sent downstream. This means you will see all spans sharing a trace ID or none. Accepted values are\\n * 1. Means accepted\\n * 0. Means denied Before this specification was written, some tracers propagated X-B3-Sampled as true or false as opposed to 1 or 0. While you shouldn't encode x-b3-sampled as true or false, a lenient implementation may accept them" ) @RequestHeader(value="x-b3-sampled", required=false) String xB3Sampled,@ApiParam(value = "Extra information coming from the client. Needed for audit purposes" ) @RequestHeader(value="x-santander-audit", required=false) String xSantanderAudit,@ApiParam(value = "Device information permitted by operation for data query. Makes it possible to apply an experience base to optimize the data collection. This header is mandatory for Poland due to security reasons" ) @RequestHeader(value="trusted-device-app-id", required=false) String trustedDeviceAppId,@ApiParam(value = "Indicates what kind of cipher algorithmic approach will be applied to a response fields subset. Supported values: * asymmetric" ) @RequestHeader(value="santander-cipher-type", required=false) String santanderCipherType,@ApiParam(value = "Seed value applied on both sides to encrypt/decrypt response entity fields. This field is mandatory if Santander-Cipher-Type is presented and is asymetric in the request Headers collection." ) @RequestHeader(value="santander-cipher-seed", required=false) String santanderCipherSeed,@ApiParam(value = "Device time formatted presenting the following the Standard Time Format pattern yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" ) @RequestHeader(value="trusted-device-time", required=false) String trustedDeviceTime,@ApiParam(value = "Contains encripted parameters from the trusted device parameter source." ) @RequestHeader(value="trusted-device-params", required=false) String trustedDeviceParams);


    @ApiOperation(value = "Update a particular bank customer information.", nickname = "bankIdRefreshPost", notes = "This feature returns the status information of the connection with a bank and it means that the customer connected that bank previously.", response = Bank.class, authorizations = {
        @Authorization(value = "JWT Profile", scopes = {
            @AuthorizationScope(scope = "bankbranch.read", description = "Banks Branches scope")
            })
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Bank.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Errors.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Errors.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Errors.class),
        @ApiResponse(code = 404, message = "Not found", response = Errors.class),
        @ApiResponse(code = 500, message = "Internal server error", response = Errors.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = Errors.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = Errors.class) })
    @RequestMapping(value = "/{bank_id}/refresh",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Bank> bankIdRefreshPost(@ApiParam(value = "Field to send the access token to the API, initially OAuth and JWT." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The server responds with the field in the header with the response language. Following the ([ISO 639-2]-[ISO 3166-1/Alpha3]) code standard." ,required=true) @RequestHeader(value="language", required=true) String language,@ApiParam(value = "CHANNEL/SEGMENT FRONT_APP/VERSION DEVICE OS/OS_VERSION NETWORK_CLIENT/VERSION FRAMEWORK/VERSION Channel: [ISO 639-2][] plus 5 custom contry digits. For Segment: retail / business Front_App/Version: For example OneApp/1.0 Device: Platform value extracted from the device. For example iPhone13 OS/VERSION: android / iOS / windows / linux / macOS, version is a platform value extracted from the device. For example iOS/1.0 Network_Client/Version: App network client and version. For example CF_Network/5.1 Framework/Version: For example Darwin/16.3.0" ,required=true) @RequestHeader(value="device-information", required=true) String deviceInformation,@ApiParam(value = "The consumer application identifier for APIs. santander-client-id must be defined just as a Request header, this is not a header defined as an API Key at security definition level" ,required=true) @RequestHeader(value="santander-client-id", required=true) String santanderClientId,@ApiParam(value = "Unique bank ID",required=true) @PathVariable("bank_id") String bankId,@ApiParam(value = "The consumer list of languages by order of preference. Following the (([ISO 639-2]-[ISO 3166-1/Alpha3])) code standard." ) @RequestHeader(value="accept-language", required=false) String acceptLanguage,@ApiParam(value = "The server responds with the data format of the response. Backend expected a JSON document format." ) @RequestHeader(value="content-type", required=false) String contentType,@ApiParam(value = "The consumer request the data format of the response by order of preference.Backend expected a JSON document format." ) @RequestHeader(value="accept", required=false) String accept,@ApiParam(value = "The consumer application identifier (only for IBM API Connect). Legacy. Will be reviewed in future releases." ) @RequestHeader(value="x-ibm-client-id", required=false) String xIbmClientId,@ApiParam(value = "The TraceId is 64 or 128-bit in length and indicates the overall ID of the trace. Every span in a trace shares this ID" ) @RequestHeader(value="x-b3-traceid", required=false) String xB3Traceid,@ApiParam(value = "The ParentSpanId is 64-bit in length and indicates the position of the parent operation in the trace tree. When the span is the root of the trace tree, there is no ParentSpanId." ) @RequestHeader(value="x-b3-parentspanid", required=false) String xB3Parentspanid,@ApiParam(value = "The SpanId is 64-bit in length and indicates the position of the current operation in the trace tree. The value should not be interpreted. It may or may not be derived from the value of the TraceId" ) @RequestHeader(value="x-b3-spanid", required=false) String xB3Spanid,@ApiParam(value = "Sampling is a mechanism to reduce the volume of data that ends up in the tracing system. In B3, sampling applies consistently per-trace: once the sampling decision is made, the same value should be consistently sent downstream. This means you will see all spans sharing a trace ID or none. Accepted values are\\n * 1. Means accepted\\n * 0. Means denied Before this specification was written, some tracers propagated X-B3-Sampled as true or false as opposed to 1 or 0. While you shouldn't encode x-b3-sampled as true or false, a lenient implementation may accept them" ) @RequestHeader(value="x-b3-sampled", required=false) String xB3Sampled,@ApiParam(value = "Extra information coming from the client. Needed for audit purposes" ) @RequestHeader(value="x-santander-audit", required=false) String xSantanderAudit,@ApiParam(value = "Device information permitted by operation for data query. Makes it possible to apply an experience base to optimize the data collection. This header is mandatory for Poland due to security reasons" ) @RequestHeader(value="trusted-device-app-id", required=false) String trustedDeviceAppId,@ApiParam(value = "Indicates what kind of cipher algorithmic approach will be applied to a response fields subset. Supported values: * asymmetric" ) @RequestHeader(value="santander-cipher-type", required=false) String santanderCipherType,@ApiParam(value = "Seed value applied on both sides to encrypt/decrypt response entity fields. This field is mandatory if Santander-Cipher-Type is presented and is asymetric in the request Headers collection." ) @RequestHeader(value="santander-cipher-seed", required=false) String santanderCipherSeed,@ApiParam(value = "Device time formatted presenting the following the Standard Time Format pattern yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" ) @RequestHeader(value="trusted-device-time", required=false) String trustedDeviceTime,@ApiParam(value = "Contains encripted parameters from the trusted device parameter source." ) @RequestHeader(value="trusted-device-params", required=false) String trustedDeviceParams);

}
